== Setup and Configuration ==
=== Installing Git on Windows ===
One way to install git on Windows is to download the windows package from [http://code.google.com/p/msysgit/downloads/list msysgit]. Choose the "Full installer for official Git For Windows 1.x.x."  Once that's installed (default options work great on a Windows -> linux environment), simply load up the "git bash" program from your start menu. Now you have git installed and almost ready to work.

=== Generating a Public/Private RSA Key Pair ===
In Windows open up '''Git Bash''' from the start menu. In any Unix based operating system (such as OSX) open a Terminal window.

Once at the bash prompt type the following. Answers to the prompts are provided below. Do not be alarmed if the output from '''ssh-keygen''' is different on your system. Output varies between versions.
<syntaxhighlight lang="bash">
$ ssh-keygen -b 2048 -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/CAMPUS/jwindle/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/CAMPUS/jwindle/.ssh/id_rsa.
Your public key has been saved in /home/CAMPUS/jwindle/.ssh/id_rsa.pub.
The key fingerprint is:
e6:cb:bc:d4:06:0c:9a:99:5b:c4:72:ea:4f:b3:42:13 jwindle@n260-dl-windlej
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
|    . =          |
|    EX o         |
|    *.. S        |
|   .oo o o       |
|   .o.o o o      |
|    .o * o       |
|     .o =.       |
+-----------------+
$
</syntaxhighlight>

When prompted to "Enter file in which to save the key" just press Enter. '''ssh-keygen''' will select the correct file location for you.

Entering a passphrase will help protect your newly generated private key. You will however be prompted for this passphrase every time you use git to push or pull from the server unless you have something such as ssh-agent running to cache your passpharse. Most modern operating systems have ssh passphrase cashing setup by default such as OS X or Ubuntu. Windows unfortunately is not among modern operating systems that have this setup by default. 


Next you will want to send your public key to one of the Bellevue College Git Managers and have them install it on the Git server.
The file that contains your public key can be found in the following locations.

'''Windows Users:''' %USERPROFILE%\.ssh\id_rsa.pub

'''Unix Users:''' ~/.ssh/id_rsa.pub


Unix users can also get the key easily with the following command.
<pre>
$ cat ~/.ssh/id_rsa.pub
</pre>

=== Reusing a Public/Private RSA Key Pair on a another computer ===
If you are working on multiple machines, there is no need to generate a another set of public/private RSA Key pairs.  All you need to do is copy your id_rsa file to your new system and potentially change permissions on that file after you copy it.

'''Unix Users:''' 
The private key you need to copy is located here: ~/.ssh/id_rsa.pub.  Once you move the file to the new location, you will need to update the permissions of that file.   

Changing permissions on terminal
<pre>
$ 600 ~/.ssh/id_rsa
</pre>

=== Setting Author Information ===
When you first setup git it is important to set your author information. This information is used to identify you when making commits to a git repository.

You can set your name and e-mail address like so.
<syntaxhighlight lang="bash">
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your.email@bellevuecollege.edu"
</syntaxhighlight>

== Working with Git Repositories ==
=== Creating a New Repository ===
Open the git command prompt and navigate to the directory that contains (or will contain) your project.
<syntaxhighlight lang="bash">
$ cd ~/projects/myproject
</syntaxhighlight>

Initialize a new git repository
<syntaxhighlight lang="bash">
$ git init
Initialized empty Git repository in ~/projects/myproject/.git/
</syntaxhighlight>

Once you have some files in your project folder you will want to add and commit them to your new repository. From the project directory run the following.
<syntaxhighlight lang="bash">
$ git add -A
$ git commit -m "This is my git commit message. I'm describing what I did in this message."
[master (root-commit) d7b877f] This is my git commit message. I'm describing what I did in this message.
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 file.txt
</syntaxhighlight>

'''git add -A''' tells git to look at your entire project folder and stage any new files so they are ready to be committed. The '''-A''' option will also tell get git to stop tracking any files you may have removed from your project. For more information you can type '''man git add''' into Google.

'''git commit''' is what solidifies your changes in your git repository, you can think of this kind of like a snapshot in time. If you ever need to come back to this point you can. The '''-m''' option allows you to add a message to your commit. You should always add a commit message that clearly states what you did and why the commit was significant.

==== .gitignore ====

There are a variety of files that should not be checked in to source control. Git allows this to be configured on several different levels, but it is best to include a ''.gitignore'' file in the repository itself to ensure that other developers don't accidentally add such files to the repository.

===== for .NET projects =====

# Start with the default VisualStudio file provided at http://gitignore.io/api/visualstudio. To create the .gitignore file directly on the command line,

<syntaxhighlight lang="bash">
wget -O .gitignore http://gitignore.io/api/visualstudio
</syntaxhighlight>

<ol start="2">
<li>Enable NuGet package restore, including another pattern for sub-folder package folders:</li>
</ol>

<syntaxhighlight lang="bash" highlight="3-4">
# NuGet Packages Directory
## TODO: If you have NuGet Package Restore enabled, uncomment the next line
packages/
*/packages/
</syntaxhighlight>

<ol start="3">
<li>Add the following patterns:</li>
</ol>

<syntaxhighlight lang="bash">
# ignore all except example .config & project files files
**/_[Cc]onfig[Ss]ource/*.config
!**/_[Cc]onfig[Ss]ource/EXAMPLE-*.config

# Red-Gate SQL Data Compare project files
*.sdc
!EXAMPLE-*.sdc
</syntaxhighlight>

==== Whitespace and line endings (EOL) ====

If not configured properly to manage changing line ending characters, git can sometimes claim that a file has changed when no substantive modification has been made. Such situations can become quite the headache as git will not allow you to change branches, etc. if it thinks there are changes that need to be committed - and in some cases commands like ''git stash'' will not work properly if the only change is the EOL character. '''To avoid these problems, follow these steps when the repository is first created:'''

First, enable ''autocrlf'' in your git configuration. It is recommended you do this at all levels - including the repository:

<syntaxhighlight lang="bash">
git config core.autocrlf true
</syntaxhighlight>

===== for .NET projects =====
Add the following '''.gitattributes''' file to the repository:

<syntaxhighlight lang="bash">
*	text=auto

# The following file extensions should be treated as text files and use
# Windows style line endings
*.Config	eol=crlf
*.Master	eol=crlf
*.XML		eol=crlf
*.xml		eol=crlf
*.asax		eol=crlf
*.asmx		eol=crlf
*.asp		eol=crlf
*.aspx		eol=crlf
*.cd		eol=crlf
*.cmd		eol=crlf
*.config	eol=crlf
*.cs		eol=crlf
*.cshtml	eol=crlf
*.csproj	eol=crlf
*.css		eol=crlf
*.edmx		eol=crlf
*.html		eol=crlf
*.js		eol=crlf
*.nuspec	eol=crlf
*.php		eol=crlf
*.ps1		eol=crlf
*.pubxml	eol=crlf
*.rgproj	eol=crlf
*.scpf		eol=crlf
*.sdc		eol=crlf
*.settings	eol=crlf
*.sln		eol=crlf
*.sql		eol=crlf
*.testsettings	eol=crlf
*.transform	eol=crlf
*.txt		eol=crlf
*.vsmdi		eol=crlf
*.dbproj  eol=crlf
*.xaml  eol=crlf
Properties/*.sql* eol=crlf

# Treat binary files as binary
*.dll		binary
*.gif		binary
*.jpg		binary
*.nupkg		binary
*.pdb		binary
*.png		binary
*.ssc		binary
</syntaxhighlight>

If you are checking MS Office files into the repository, include the following in '''.gitattributes'''

<syntaxhighlight lang="bash">
# Treat Microsoft Office Documents as Binary Files
*.accda binary
*.accdb binary
*.accdc binary
*.accde binary
*.accdp binary
*.accdr binary
*.accdt binary
*.accdu binary
*.acl binary
*.ade binary
*.adp binary
*.asd binary
*.cnv binary
*.crtx binary
*.doc binary
*.docm binary
*.docx binary
*.dot binary
*.dotm binary
*.dotx binary
*.grv binary
*.iaf binary
*.laccdb binary
*.maf binary
*.mam binary
*.maq binary
*.mar binary
*.mat binary
*.mda binary
*.mdb binary
*.mde binary
*.mdt binary
*.mdw binary
*.mpd binary
*.mpp binary
*.mpt binary
*.oab binary
*.obi binary
*.oft binary
*.olm binary
*.one binary
*.onepkg binary
*.ops binary
*.ost binary
*.pa binary
*.pip binary
*.pot binary
*.potm binary
*.potx binary
*.ppa binary
*.ppam binary
*.pps binary
*.ppsm binary
*.ppsx binary
*.ppt binary
*.pptm binary
*.pptx binary
*.prf binary
*.pst binary
*.pub binary
*.puz binary
*.rpmsg binary
*.sldm binary
*.sldx binary
*.slk binary
*.snp binary
*.svd binary
*.thmx binary
*.vdx binary
*.vrge08message binary
*.vsd binary
*.vss binary
*.vst binary
*.vsx binary
*.vtx binary
*.wbk binary
*.wll binary
*.xar binary
*.xl binary
*.xla binary
*.xlam binary
*.xlb binary
*.xlc binary
*.xll binary
*.xlm binary
*.xls binary
*.xlsb binary
*.xlsm binary
*.xlsx binary
*.xlt binary
*.xltm binary
*.xltx binary
*.xlw binary
*.xsf binary
*.xsn binary
</syntaxhighlight>

=== Uploading a New Git Repository ===
After you have been working with your git repository on your local machine you may want to upload a copy to our server. This is useful for sharing projects with others and also acts as a backup location for your project.

The first step is to request a new repository on the git server from the '''Git Management Team'''. The '''Git Management Team''' will assign your project a repository name. In this example the repository name being used will be '''myproject'''.

After your empty repository has been setup on the server you can push to it by doing the following.
<syntaxhighlight lang="bash">
$ cd ~/projects/myproject
$ git remote add origin git@git.bellevuecollege.edu:/myproject.git
$ git push --all -u
Counting objects: 3, done.
Writing objects: 100% (3/3), 290 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To ssh://git@git.bellevuecollege.edu/myproject
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
</syntaxhighlight>
First we change directory into the project folder if we weren't already there, next we set the remote repository address as the origin of our repository, and then push all branches to the remote server updating their default remote location.

If you would like to test to make sure everything is working you can pull from the server.
<syntaxhighlight lang="bash">
$ git pull
Already up-to-date.
</syntaxhighlight>

Anyone else that has access to your repository should now be able to clone it to their local machine using the same ssh address. In this case it would be '''ssh://git@git.bellevuecollege.edu/myproject'''

=== Cloning a Repository ===
If you want to work with a repository that someone else has already uploaded the first thing you will want to do (in most cases) is clone that repository to your local machine. Here is an example of how you would clone a repository called '''myproject''' to your local projects folder.
<syntaxhighlight lang="bash">
$ cd ~/projects/
$ git clone ssh://git@git.bellevuecollege.edu/myproject
Cloning into myproject...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), 290 bytes, done.
</syntaxhighlight>

If you want the local directory to have a different name than the name of the repository, use the following clone statement:
<syntaxhighlight lang="bash">
$ git clone ssh://git@git.bellevuecollege.edu/myproject localfolder
</syntaxhighlight>

=== Committing Changes to a Repository ===

After you have made your spectacular mods to code you may want to commit and push those changes to the remote repository. 
Here's how:
<syntaxhighlight lang="bash">
$ git commit
</syntaxhighlight>

You'll then get the opportunity to enter a commit message.  
::Hate the default editor?  Here's how to change to Notepad++ 
::<syntaxhighlight lang="bash">
  $git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
</syntaxhighlight>

Please follow these comment guidelines: 
* Every commit should have a message
* The first 50 characters should be a capitalized summary of the change
* If you have additional details then include a new line between the summary and details
* Wrap the details every 72 chars
* Here's a great reference, http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

After you have 'committed' your changes then you need to push them to the remote repo
<syntaxhighlight lang="bash">
$ git push
</syntaxhighlight>

=== Removing files from a respository ===

If you need to [https://diigo.com/0wto6 remove a file from the repository, but don't want to delete it] from the folder (if it was accidentally added, for example), use the following command:

<syntaxhighlight lang="bash">
 git rm --cached mylogfile.log
</syntaxhighlight>

This command (with the --ignore-unmatch switch) may also help with situations where you've deleted the file and don't want the repository to track it any longer.

If you need to remove sensitive data (e.g. a file with passwords) from both the repo and its history, see ''[https://help.github.com/articles/remove-sensitive-data Remove sensitive data]''.

=== Working in the right branch ===
When you first set up your repository, you'll start working on the masterbranch by default.  Please remember to switch to the dev or other appropriate branches when you do your amazing work.

Here are a few commands that will help you

List all branches
<syntaxhighlight lang="bash">
git branch -a
</syntaxhighlight>

Switch Branch
<syntaxhighlight lang="bash">
git checkout [branchname]
</syntaxhighlight>

== Best practices, style guides, etc. ==
* [http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html Style guide for Git commit messages]

===Recommendations===
'''Key Points:'''
*Everything happens in your local repository.  
*You’re not merging changes into the server copy – you’re pulling down what the server has, merging everything locally and then pushing the result back up to the server.  
*You’re not pulling or pushing what’s in your working directly – you’re pulling/pushing to/from your local repository - be sure to commit your changes to the local repo

'''Good Habits'''
*Pull, pull, pull.
**Pull often.
**Pull before EVERY push.
**Pull before doing any new work.
**Pull at the beginning of the day. And at the end of the day. And at lunch. And a couple more times for good measure.
*Commit often.
**Ideally, each commit should include one – and only one – task/feature/fix.
**Work on one thing at a time. When complete, commit those changes.
***It’s much easier to modify, rollback or remove an entire commit if it’s not intertwined with other features.	

'''Recommended Workflow'''
#Pull – resolve any merge conflicts
#(do work)
#Commit
#Repeat 2 – 3 until work is done, end of day, others need my code, etc.
#Pull – resolve any merge conflicts
#Push

=== Release branches ===

When releasing/deploying an application (or a new version of an application),

# Create a ''release branch'' using the naming convention '''rc-v'''''VersionNumber''
# Make at least one modification/commit on the release branch. (For .NET applications, incrementing the version on this branch works well.)
# Deploy the release branch to the QA server.
# Cycle on: test/fix bugs/release
# When approved, release branch to production.
# Merge release branch back into '''both''' ''dev'' and ''master'' (with the --no-ff option)

<syntaxhighlight lang="bash">
git checkout dev
git merge --no-ff rc-v1.0
git checkout master
git merge --no-ff rc-v1.0
</syntaxhighlight>

; Reference
: http://nvie.com/posts/a-successful-git-branching-model/ (scroll down to the '''Release branches''' section)

== Useful Git applications, etc. ==

=== For Windows/Visual Studio ===

* [http://visualstudiogallery.msdn.microsoft.com/63a7e40d-4d71-4fbb-a23b-d262124b8f4c/ Git Source Control Provider for Visual Studio 2010] - Use Visual Studio's built-in source control functionality with Git. '''Note:''' The [http://visualstudiogallery.msdn.microsoft.com/abafc7d6-dcaa-40f4-8a5e-d6724bdb980c provider for Visual Studio 2012 is different].
* [http://visualstudiogallery.msdn.microsoft.com/8f594baa-e44e-4114-8381-e175ace0fe97 Git Extensions] - The Git for Windows package referenced earlier on this page includes some minimal Explorer integration, but Git Extensions provides more – as well as additional functionality within Visual Studio.

=== Training/learning resources ===

* [http://www.git-scm.com/videos Git SCM Videos] - Entry-level videos for using git from the command line.
* If you have a Pluralsight account, the ''Git Fundamentals'' course is quite good.
* [http://try.github.io/levels/1/challenges/1 Try Git] is a hands-on, interactive walk-through using Git from the command-line.
* '''Team Foundation Service'''
** [http://blogs.msdn.com/b/visualstudioalm/archive/2013/01/30/getting-started-with-git-in-visual-studio-and-team-foundation-service.aspx Getting Started with Git in Visual Studio and Team Foundation Service]
** [http://tfs.visualstudio.com/en-us/learn/code/create-code-project-vs-git/ Visual Studio 2012 with Git] - this tutorial specifically addresses using vs2012/Git with TFS.

